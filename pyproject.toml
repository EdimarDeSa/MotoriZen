[tool.poetry]
name = "motorizen"
version = "0.1.0"
description = ""
authors = ["Edimar de Sa <edimar.sa@efscode.com.br>"]
license = "MIT"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = "^3.11"
SQLAlchemy = "^2.0.35"
python-dotenv = "^1.0.1"
psycopg2-binary = "^2.9.9"
python-keycloak = "^4.6.2"
fastapi = {extras = ["standard"], version = "^0.115.2"}
uvicorn = {extras = ["standard"], version = "^0.31.1"}
redis = "^5.1.1"
tinydb = "^4.8.2"
starlette-sessions = "^0.3.0"

[tool.poetry.dev-dependencies]
black = "^24.8.0"
isort = "^5.13.2"
mypy = "^1.11.2"
Faker = "^29.0.0"
pytest = "^8.3.3"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120

[tool.mypy]
# Tornar a checagem mais rigorosa
strict = true

# Exigir tipagem explícita de funções e métodos
disallow_untyped_defs = true

# Exigir tipagem de argumentos em funções lambdas
disallow_incomplete_defs = true

# Proibir o uso de Any explícito
# disallow_any_explicit = false

# Exigir declarações de tipo em todas as variáveis locais
warn_unused_ignores = true
warn_return_any = false
warn_no_return = true
ignore_missing_imports = true

# Mostrar erros em funções de terceiros que não estão tipadas
follow_imports = "normal"

# Ativar checagem de atributos não inicializados
check_untyped_defs = true

# Alertar sobre possíveis tipos None onde não esperado
strict_optional = true

# Define o diretório base como 'src'
mypy_path = "src"

